/*
 * -------------------------------------------------
 *  nf-core/scovtree Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  // Input data

  input                             = ''
  reference_name                    = 'MN908947.3'
  substitution_model                = 'GTR'

  //Input options for filtering sequence against GISAID Database
  filter_gisaid                     = false
  gisaid_sequences                  = ''
  gisaid_metadata                   = ''
  country                           = ''
  region                            = ''
  sample_lineage                    = ''
  lmin                              = 10000
  lmax                              = 32000
  xambig                            = 3000
  msa_threshold_filter              = 10000
  outdir                            = './results'
  publish_dir_mode                  = 'copy'

  //Multiple Sequence Alignment
  //nextalign                         = false


  // Boilerplate options
  enable_conda                      = false
  singularity_pull_docker_container = false
  multiqc_config                    = false
  max_multiqc_email_size            = 25.MB
  plaintext_email                   = false
  monochrome_logs                   = false
  help                              = false
  tracedir                          = "${params.outdir}/pipeline_info"
  custom_config_version             = 'master'
  custom_config_base                = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                         = false
  config_profile_description        = false
  config_profile_contact            = false
  config_profile_url                = false
  validate_params                   = true
  show_hidden_params                = false
  schema_ignore_params              = 'modules'

  // Defaults only, expecting to be overwritten
  max_memory                        = 32.GB
  max_cpus                          = 16
  max_time                          = 240.h

}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda {
    params.enable_conda              = true
    docker.enabled                   = false
    singularity.enabled              = false
    podman.enabled                   = false
    shifter.enabled                  = false
    charliecloud                     = false
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled                   = true
    singularity.enabled              = false
    podman.enabled                   = false
    shifter.enabled                  = false
    charliecloud.enabled             = false
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions                = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    docker.enabled                   = false
    singularity.enabled              = true
    podman.enabled                   = false
    shifter.enabled                  = false
    charliecloud.enabled             = false
    singularity.autoMounts           = true
  }
  podman {
    singularity.enabled              = false
    docker.enabled                   = false
    podman.enabled                   = true
    shifter.enabled                  = false
    charliecloud                     = false
  }
  shifter {
    singularity.enabled              = false
    docker.enabled                   = false
    podman.enabled                   = false
    shifter.enabled                  = true
    charliecloud.enabled             = false
  }
  charliecloud {
    singularity.enabled              = false
    docker.enabled                   = false
    podman.enabled                   = false
    shifter.enabled                  = false
    charliecloud.enabled             = true
  }
  test_gisaid { includeConfig 'conf/test_gisaid.config' }
  test { includeConfig 'conf/test.config' }
}

// Increase time available to build Conda environment
conda { createTimeout = "120 min" }

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/scovtree'
  author = 'Hai Nguyen'
  homePage = 'https://github.com/nf-core/scovtree'
  description = 'Phylogenetic Analysis for SARS-COV2'
  mainScript = 'main.nf'
  nextflowVersion = '!>=21.04.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
